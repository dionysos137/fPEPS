===========================================================================================
 Benchmark
===========================================================================================

 -2017.05.31- -DONE- 1. 2-by-2 MPS with PBC
  
  fci/test_fci.py U=1.5
  31   10   167   0  T      -3.700331728282  1.473e-05  5.74e-01
  31   10   167   1  T      -3.369927416769  2.274e-05  5.74e-01
  31   10   167   2  T      -3.369927416692  2.594e-05  5.74e-01
  31   10   167   3  T      -3.369927416568  3.364e-05  5.74e-01
  31   10   167   4  T      -3.369927416200  4.662e-05  5.74e-01
  31   10   167   5  T      -3.069065297039  8.078e-05  5.74e-01
  31   10   167   6  T      -2.975775104977  5.642e-05  5.74e-01
  31   10   167   7  T      -2.975775103962  8.339e-05  5.74e-01

 --- save vec into fname= data/peps_vec1  e= -3.70031957046
final =  PHP,PP,PHP/PP,eav= -2118762.75544 572589.127804 -3.70031957046 -0.925079892614
-3.70031957046

===========================================================================================

 -2017.05.31- -DONE- 2. 2-by-3 fPEPS (very simple extension) 
	                No essential difference using SYMMETRIC JUMPS; But less systematic! 

  peps2by3.py
   
   einsum<PEPS|PEPS>= 1150.74042695
   
   [dumpVcoeff.dump] shape= (2, 3)
   shape= (4096,)
   vcoeff<P|P>= 1150.74042695
   <P|P>= 1150.74042695
   
   [test_load]
   
   Ovlp(bare)= 1059.33193589
   Ovlp(swap)= 1150.74042695
   
   U-terms:
   (i,j)= (0, 0)  <U>= 214.546745724
   (i,j)= (1, 0)  <U>= 344.478191145
   (i,j)= (0, 1)  <U>= 324.37278176
   (i,j)= (1, 1)  <U>= 283.330876729
   (i,j)= (0, 2)  <U>= 341.922742824
   (i,j)= (1, 2)  <U>= 343.490009759
  
 check_vcoeff2by3.py
   e= [-2.41421356 -2.41421356 -1.         -1.         -0.41421356 -0.41421356
     0.41421356  0.41421356  1.          1.          2.41421356  2.41421356]
   ndim= 4096
   pp= 1150.74042695
   php= 2275.32529174
   e= 1.97727066717
   i= 0  <Ui>= 214.546745724 0.18644234677
   i= 1  <Ui>= 344.478191145 0.299353514552
   i= 2  <Ui>= 324.37278176 0.281881799025
 
===========================================================================================

 >>> CHECK - Uni10's fermionic implementation !!! DONE.

===========================================================================================

 -2017.06.05- -DONE- 3. General 3-by-3 fPEPS ===> check <Ni> & <Ui> 
			(only even Ni for parity-conserving fPEPS)

  In fact, we could use previous 2-by-2 and 2-by-3 as test cases!!!
  Bugs fixed: the subtle thing is the PEPS is reflected in the new representation!!!

  peps3by3.py
   (i,j)= (0, 0)  <U>= 340559.931777
   (i,j)= (1, 0)  <U>= 340814.387818
   (i,j)= (2, 0)  <U>= 337921.960415
   (i,j)= (0, 1)  <U>= 355554.278847
   (i,j)= (1, 1)  <U>= 347431.418238
   (i,j)= (2, 1)  <U>= 324445.329365
   (i,j)= (0, 2)  <U>= 273874.724814
   (i,j)= (1, 2)  <U>= 322429.267262
   (i,j)= (2, 2)  <U>= 371414.12329

  check_vcoeff3by3.py
   i= 0  <Ui>= 929691.358444 337921.960415 0.363477574946
   i= 1  <Ui>= 929691.358444 340814.387818 0.36658874445
   i= 2  <Ui>= 929691.358444 340559.931777 0.366315044971
   i= 3  <Ui>= 929691.358444 324445.329365 0.348981763054
   i= 4  <Ui>= 929691.358444 347431.418238 0.373706193009
   i= 5  <Ui>= 929691.358444 355554.278847 0.382443351353
   i= 6  <Ui>= 929691.358444 371414.12329 0.399502609028
   i= 7  <Ui>= 929691.358444 322429.267262 0.346813234665
   i= 8  <Ui>= 929691.358444 273874.724814 0.294586716685

===========================================================================================

 -2017.06.06- -DONE- 4. General 3-by-3 fPEPS ===> check t<ij> and 
		        variational optimizations. 

  * Vertical bond is simple:

  peps3by3.py
   Ovlp= 920387.047467
   Ovlp= 929691.358444
   t<i,j>= (0, 0) a/b/t -3533.20383477 -33523.8790362 -37057.082871
   t<i,j>= (1, 0) a/b/t 10235.6199288 3458.59103079 13694.2109596
   t<i,j>= (0, 1) a/b/t 3163.12974623 -2467.74027793 695.389468299
   t<i,j>= (1, 1) a/b/t -4098.0021096 -10659.683794 -14757.6859036
   t<i,j>= (0, 2) a/b/t -25472.0211245 -18497.8998253 -43969.9209498
   t<i,j>= (1, 2) a/b/t 54749.9883745 3335.6256382 58085.6140127

  check_vcoeff3by3.py
   i,j= (0, 1)  t<ij>= 929691.358444 -37057.082871 -0.0398595539632
   i,j= (1, 2)  t<ij>= 929691.358444 13694.2109596 0.0147298464541
   i,j= (3, 4)  t<ij>= 929691.358444 695.389468299 0.000747978844789
   i,j= (4, 5)  t<ij>= 929691.358444 -14757.6859036 -0.0158737475287
   i,j= (6, 7)  t<ij>= 929691.358444 -43969.9209498 -0.0472951808689
   i,j= (7, 8)  t<ij>= 929691.358444 58085.6140127 0.0624783843424

  * Horizontal bond: 
   nav = 34.4680558524 9.41782620155
   i= 0  <Ui>= 3.03019996921
   i= 1  <Ui>= 0.751314669617
   i= 2  <Ui>= 0.842217546769
   i= 3  <Ui>= 1.78575992135
   i= 4  <Ui>= 0.465121372803
   i= 5  <Ui>= 1.58510064033
   i= 6  <Ui>= 1.64781328608
   i= 7  <Ui>= 1.61102561002
   i= 8  <Ui>= 2.00416141803
   Vbonds
   i,j= (0, 1)  t<ij>= 0.154206733271
   i,j= (1, 2)  t<ij>= 1.20145443432
   i,j= (3, 4)  t<ij>= 0.153167109773
   i,j= (4, 5)  t<ij>= -0.361526690229
   i,j= (6, 7)  t<ij>= -0.482795620049
   i,j= (7, 8)  t<ij>= -0.307294738587
   Hbonds
   i,j= (0, 3)  t<ij>= 0.211349529859
   i,j= (3, 6)  t<ij>= 0.481900619756
   i,j= (1, 4)  t<ij>= -0.799035484425
   i,j= (4, 7)  t<ij>= -0.096553855202
   i,j= (2, 5)  t<ij>= 0.761032529915
   i,j= (5, 8)  t<ij>= 0.506558564584
   3.65987385143 15.1451775672 4.13816928725

  ====================================
  * Benchmark data from FCI for U=1.5
  ====================================
   2-by-2:
   nelec= 2 e= [-3.70033173 -2.        ]
   nelec= 4 e= [-3.0690653  -2.97577511]
   3-by-3:
   n=2
         Sweep Energy = -5.488430796930
         Sweep Energy = -4.026233291669
   n=4
         Sweep Energy = -7.939344693518
         Sweep Energy = -7.934768409486
   n=6
         Sweep Energy = -10.013857411638
         Sweep Energy = -8.714248099355
   n=8
         Sweep Energy = -9.149050617592
         Sweep Energy = -9.120564065499
   n=10
         Sweep Energy = -7.649050616245
         Sweep Energy = -7.620564052286
   n=12
         Sweep Energy = -5.513857410112
         Sweep Energy = -4.214248099889
   n=14
         Sweep Energy = -0.439344693590
         Sweep Energy = -0.434768408756 

===========================================================================================

 -2017.06.08- -DONE- Complex PEPS for "excited states" - selection of particle number 
		     2-by-2 and 3-by-3 examples.

  Use symmetry projection to 4-by-4 PEPS to impose particle number conservation !!! 
  => This is a good strategy !!!

===========================================================================================
